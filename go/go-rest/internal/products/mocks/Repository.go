// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	products "go-tdd/internal/products"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 products.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(products.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int32) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() *[]products.Product {
	ret := _m.Called()

	var r0 *[]products.Product
	if rf, ok := ret.Get(0).(func() *[]products.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]products.Product)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int32) (*products.Product, error) {
	ret := _m.Called(id)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(int32) *products.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id int32, _a1 products.Product) (*products.Product, error) {
	ret := _m.Called(id, _a1)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(int32, products.Product) *products.Product); ok {
		r0 = rf(id, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, products.Product) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
